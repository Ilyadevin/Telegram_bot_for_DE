from basic_settings import *

bot = telebot.TeleBot('2029007087:AAHQVbeZofoMALxBCsa_bmwAS0uU6rEchvk')


@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üìö –ò—â–µ–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É!")
    item2 = types.KeyboardButton("üé¶ –ò—â–µ–º –≤–∏–¥–µ–æ!")
    item3 = types.KeyboardButton("–û–± –∞–≤—Ç–æ—Ä–µ")

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, "
                     "{0.first_name}!\n"
                     "–Ø - <b>{1.first_name}</b>, "
                     "–±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã —Ç—ã –Ω–∞—É—á–∏–ª—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É."
                     .format(message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == 'üìö –ò—â–µ–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É!':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data='mathlit')
            item2 = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data='informlit')

            markup.add(item1, item2)
            bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –Ω—É–∂–Ω–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞?\n"
                                              "‚§µ")
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–æ–π —Ç–µ–º—ã - –Ω–∞–ø–∏—à–∏ –µ–µ, –∞ —è –ø–æ–ø—Ä–æ–±—É—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è')
            bot.send_message(message.chat.id, text="–û—Ç–ª–∞–¥–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", parse_mode='html',
                             reply_markup=markup)
        elif message.text == 'üé¶ –ò—â–µ–º –≤–∏–¥–µ–æ!':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data='math')
            item2 = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data='inform')

            markup.add(item1, item2)
            bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –Ω—É–∂–Ω–æ –≤–∏–¥–µ–æ?\n"
                                              "–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–º–∞—Ç–∏–∫–∞–º"
                                              "‚§µ")
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–æ–π —Ç–µ–º—ã - –Ω–∞–ø–∏—à–∏ –µ–µ?')
            bot.send_message(message.chat.id, text="–û—Ç–ª–∞–¥–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", parse_mode='html',
                             reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'math':
                bot.send_message(call.message.chat.id, '–ö–Ω–æ–ø–∫–∞ "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞" —Ä–∞–±–æ—Ç–∞–µ—Ç')
            elif call.data == 'inform':
                bot.send_message(call.message.chat.id, '–ö–Ω–æ–ø–∫–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞" —Ä–∞–±–æ—Ç–∞–µ—Ç')
            elif call.data == 'mathlit':
                bot.send_message(call.message.chat.id, '–ö–Ω–æ–ø–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –ø–æ "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–µ" —Ä–∞–±–æ—Ç–∞–µ—Ç')
            elif call.data == 'informlit':
                bot.send_message(call.message.chat.id, '–ö–Ω–æ–ø–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ" —Ä–∞–±–æ—Ç–∞–µ—Ç')
            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=None)
            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                      text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception as e:
        print(repr(e))


# RUN
bot.polling(none_stop=True)
