import telebot
import random
from telebot import types
import argparse
import googleapiclient
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

bot = telebot.TeleBot("2029007087:AAHQVbeZofoMALxBCsa_bmwAS0uU6rEchvk")
youtube_token = "AIzaSyB8UcRYxwa7ITRPQ3kEYYIJYbVCSblH6T0"
YOUTUBE_API_SERVICE_NAME = 'youtube'
YOUTUBE_API_VERSION = 'v3'


def about(message):
    bot.send_message(message.chat.id,
                     "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏ —à–∫–æ–ª—å–Ω–∏–∫–∞–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º"
                     " –≤ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω–∏–º —Ç–µ–º–∞–º.\n"
                     "–ê–≤—Ç–æ—Ä: @erlihigh \n"
                     "")


@bot.message_handler(commands=['start'])
def welcome(message):
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üìö –ò—â–µ–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É!")
    item2 = types.KeyboardButton("üé¶ –ò—â–µ–º –≤–∏–¥–µ–æ!")
    item3 = types.KeyboardButton("–û–± –∞–≤—Ç–æ—Ä–µ")

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, "
                     "{0.first_name}!\n"
                     "–Ø - <b>{1.first_name}</b>, "
                     "–±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã —Ç—ã –Ω–∞—É—á–∏–ª—Å—è —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É."
                     .format(message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def markups(message):
    markup = types.InlineKeyboardMarkup(row_width=2)

    item1 = types.InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ')
    item2 = types.InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞')
    item3 = types.KeyboardButton("–û–± –∞–≤—Ç–æ—Ä–µ")
    markup.add(item1, item2, item3)
    if message.chat.type == 'private':
        if message.text == 'üìö –ò—â–µ–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É!':
            bot.send_message(message.chat.id, "–ß—Ç–æ –∏—â–µ–º?")
            bot.send_message(message.chat.id, "–û—Ç–ª–∞–¥–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        elif message.text == 'üé¶ –ò—â–µ–º –≤–∏–¥–µ–æ!':
            bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –Ω—É–∂–Ω–æ –≤–∏–¥–µ–æ?\n"
                                              "–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∏–¥–µ–æ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–º–∞—Ç–∏–∫–∞–º"
                                              "‚§µ")
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞–Ω–æ–π —Ç–µ–º—ã - –Ω–∞–ø–∏—à–∏ –µ–µ?')
            bot.send_message(message.chat.id, "–û—Ç–ª–∞–¥–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        elif message.text == '–û–± –∞–≤—Ç–æ—Ä–µ':
            about(message)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')

            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?",
                                  reply_markup=None)

            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                      text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")

    except Exception as e:
        print(repr(e))


def youtube_search(options):
    youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION,
                    developerKey=youtube_token)

    # Call the search.list method to retrieve results matching the specified
    # query term.
    search_response = youtube.search().list(
        q=options.q,
        part='id,snippet',
        maxResults=options.max_results
    ).execute()

    videos = []
    channels = []
    playlists = []

    # Add each result to the appropriate list, and then display the lists of
    # matching videos, channels, and playlists.
    for search_result in search_response.get('items', []):
        if search_result['id']['kind'] == 'youtube#video':
            videos.append('%s (%s)' % (search_result['snippet']['title'],
                                       search_result['id']['videoId']))
        elif search_result['id']['kind'] == 'youtube#channel':
            channels.append('%s (%s)' % (search_result['snippet']['title'],
                                         search_result['id']['channelId']))
        elif search_result['id']['kind'] == 'youtube#playlist':
            playlists.append('%s (%s)' % (search_result['snippet']['title'],
                                          search_result['id']['playlistId']))

    print('Videos:\n', '\n'.join(videos), '\n')
    print('Channels:\n', '\n'.join(channels), '\n')
    print('Playlists:\n', '\n'.join(playlists), '\n')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--q', help='Search term', default='Google')
    parser.add_argument('--max-results', help='Max results', default=25)
    args = parser.parse_args()

    try:
        youtube_search(args)
    except HttpError as e:
        print('An HTTP error %d occurred:\n%s' % (e.resp.status, e.content))
# RUN
bot.polling(none_stop=True)
